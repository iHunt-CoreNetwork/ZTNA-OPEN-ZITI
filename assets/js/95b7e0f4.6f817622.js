"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[3646],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=c(r),h=i,g=u["".concat(l,".").concat(h)]||u[h]||p[h]||o;return r?n.createElement(g,s(s({ref:t},d),{},{components:r})):n.createElement(g,s({ref:t},d))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,s=new Array(o);s[0]=h;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},47978:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var n=r(87462),i=(r(67294),r(3905));const o={title:"Workload Tunneling"},s=void 0,a={unversionedId:"guides/kubernetes/workload-tunneling/index",id:"guides/kubernetes/workload-tunneling/index",title:"Workload Tunneling",description:"This guide will help you discover the best strategy and tool for connecting a Kubernetes workload. This overview page links to child pages for each strategy and tool, and a summary of each is provided in the sections below. Click on the chart's outcomes to see the corresponding documentation.",source:"@site/docs/guides/kubernetes/workload-tunneling/index.md",sourceDirName:"guides/kubernetes/workload-tunneling",slug:"/guides/kubernetes/workload-tunneling/",permalink:"/docs/guides/kubernetes/workload-tunneling/",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/guides/kubernetes/workload-tunneling/index.md",tags:[],version:"current",frontMatter:{title:"Workload Tunneling"},sidebar:"docsSidebar",previous:{title:"Console",permalink:"/docs/guides/kubernetes/hosting/kubernetes-console"},next:{title:"Reverse Proxy Pod",permalink:"/docs/guides/kubernetes/workload-tunneling/kubernetes-host"}},l={},c=[{value:"Strategies and Solutions",id:"strategies-and-solutions",level:2},{value:"Intercepting Pod Egress",id:"intercepting-pod-egress",level:3},{value:"Transparent Proxy Sidecar",id:"transparent-proxy-sidecar",level:4},{value:"TCP Proxy Sidecar",id:"tcp-proxy-sidecar",level:4},{value:"TCP Proxy Cluster Service",id:"tcp-proxy-cluster-service",level:4},{value:"Ingress to Cluster Services",id:"ingress-to-cluster-services",level:3},{value:"Reverse Proxy Router Pod",id:"reverse-proxy-router-pod",level:4},{value:"Nginx Proxy Module",id:"nginx-proxy-module",level:4},{value:"Reverse Proxy Tunnel Pod",id:"reverse-proxy-tunnel-pod",level:4}],d={toc:c},u="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This guide will help you discover the best strategy and tool for connecting a Kubernetes workload. This overview page links to child pages for each strategy and tool, and a summary of each is provided in the sections below. Click on the chart's outcomes to see the corresponding documentation."),(0,i.kt)("mermaid",{value:'graph TB; \n  A{Pod connects to an </br>OpenZiti Service?}\n  A -- Yes --\x3e B{Intercept at pod or </br>cluster level?}\n  subgraph egressGraph ["&nbsp;"]\n    direction BT\n    B -- CLUSTER --\x3e F(["TCP proxy cluster service </br>provides cluster DNS and TCP proxy </br>for each Ziti service"])\n    B -- POD ---\x3e G{Pod uses DNS or </br>static IP to connect to </br>the OpenZiti Service?}\n    G -- YES --\x3e H(["tproxy sidecar</br> provides DNS and </br>IP interception to the pod"])\n    G -- NO ---\x3e I(["tcp proxy sidecar</br>binds a local port to </br>each OpenZiti Service"])\n  end\n  class egressGraph subgraphClass\n  A -- No --------\x3e K{OpenZiti Router </br>is installed?}\n  subgraph ingressGraph ["&nbsp;"]\n    K -- Yes --\x3e J([OpenZiti Router reverse proxy </br>provides ingress to</br>cluster services])\n    K -- No ---\x3e C{Nginx </br>is </br>installed?}\n    C -- Yes --\x3e D([Nginx container with </br>OpenZiti proxy module </br>provides ingress to</br>cluster services])\n    C -- No ---\x3e E([reverse proxy tunnel pod</br>provides ingress </br>to cluster services])\n  end\n  click D "#nginx-proxy-module" "OpenZiti Nginx Module"\n  click E "#reverse-proxy-tunnel-pod" "ziti-host"\n  click F "#tcp-proxy-cluster-service" "cluster proxy"\n  click H "#transparent-proxy-sidecar" "transparent sidecar"\n  click I "#tcp-proxy-sidecar" "loopback sidecar"\n  click J "#reverse-proxy-router-pod" "cluster reverse proxy"'}),(0,i.kt)("h2",{id:"strategies-and-solutions"},"Strategies and Solutions"),(0,i.kt)("p",null,"In the chart above, there are several strategies and solutions for connecting a Kubernetes workload. The following sections describe each strategy and solution in more detail. These are organized into two main categories: ingress to cluster services, and intercepting pod egress."),(0,i.kt)("h3",{id:"intercepting-pod-egress"},"Intercepting Pod Egress"),(0,i.kt)("p",null,'An OpenZiti Tunneler can be used to intercept pod egress. One important thing to know is that the OpenZiti Tunneler that is used in this way may also be used to "host" OpenZiti Services in order to provide ingress to cluster services.'),(0,i.kt)("h4",{id:"transparent-proxy-sidecar"},(0,i.kt)("a",{parentName:"h4",href:"/docs/guides/kubernetes/workload-tunneling/kubernetes-sidecar"},"Transparent Proxy Sidecar")),(0,i.kt)("p",null,"You can deploy a transparent proxy sidecar to intercept pod egress. The sidecar provides a DNS nameserver that is used by the workload application to resolve OpenZiti Service addresses. The sidecar container runs ",(0,i.kt)("inlineCode",{parentName:"p"},"ziti tunnel tproxy")," to create IPTables TPROXY rules in the pod. For more information, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/kubernetes/workload-tunneling/kubernetes-sidecar"},"transparent proxy sidecar")," quickstart."),(0,i.kt)("h4",{id:"tcp-proxy-sidecar"},(0,i.kt)("a",{parentName:"h4",href:"/docs/guides/kubernetes/workload-tunneling/kubernetes-sidecar"},"TCP Proxy Sidecar")),(0,i.kt)("p",null,"You can deploy a loopback proxy sidecar for pod egress to OpenZiti Services. The sidecar binds OpenZiti Services to a local port on the pod's loopback interface, e.g., 127.0.0.1:8443. The workload application must be configured to connect to the local port. This mode of operation has a few differences in comparison to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/kubernetes/workload-tunneling/kubernetes-sidecar"},"transparent proxy sidecar")," quickstart."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The sidecar container runs ",(0,i.kt)("inlineCode",{parentName:"li"},"ziti tunnel proxy")," instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"ziti tunnel tproxy"),"."),(0,i.kt)("li",{parentName:"ol"},"The sidecar container does not need the CAP_NET_ADMIN capability."),(0,i.kt)("li",{parentName:"ol"},"The sidecar container does not need a ",(0,i.kt)("inlineCode",{parentName:"li"},"dnsPolicy")," or explicit nameserver.")),(0,i.kt)("h4",{id:"tcp-proxy-cluster-service"},(0,i.kt)("a",{parentName:"h4",href:"/docs/guides/kubernetes/hosting/kubernetes-router"},"TCP Proxy Cluster Service")),(0,i.kt)("p",null,"The OpenZiti Router can be deployed to provide a cluster-wide proxy for OpenZiti Services, optionally exposing the Ziti Services' proxy ports with an Ingress or LoadBalancer. This is accomplished by first creating the router with tunnel mode enabled, then deploying the router Helm chart with input values specifying each Ziti Service for which the router's tunnel identity is authorized by a Dial Service Policy. For more information, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/kubernetes/hosting/kubernetes-router"},"OpenZiti Router")," page. "),(0,i.kt)("h3",{id:"ingress-to-cluster-services"},"Ingress to Cluster Services"),(0,i.kt)("p",null,'Any OpenZiti Tunneler can be used to "host" an OpenZiti Service. This hosting begins a few moments after an OpenZiti Service becomes authorized for the OpenZiti Identity in use by the SDK. This section is about different ways to deploy an OpenZiti Tunneler to provide ingress to cluster services.'),(0,i.kt)("h4",{id:"reverse-proxy-router-pod"},(0,i.kt)("a",{parentName:"h4",href:"/docs/guides/kubernetes/hosting/kubernetes-router"},"Reverse Proxy Router Pod")),(0,i.kt)("p",null,"The OpenZiti Router's built-in tunneler can reverse-proxy cluster services for Ziti clients. This is accomplished by creating the router with tunneler mode enabled, and then installing the OpenZiti Router Helm chart with the tunneler mode set to ",(0,i.kt)("inlineCode",{parentName:"p"},"host")," (the default). For more information, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/kubernetes/hosting/kubernetes-router"},"OpenZiti Router")," page."),(0,i.kt)("h4",{id:"nginx-proxy-module"},(0,i.kt)("a",{parentName:"h4",href:"/docs/guides/securing-apis/aks-api-with-nginx-ziti-module"},"Nginx Proxy Module")),(0,i.kt)("p",null,"The OpenZiti Nginx Proxy Module can be used to provide ingress to cluster services. The module binds OpenZiti Services to an Nginx stream context and forward requests to the configured upstreams. Unlike the rest of these solutions, the Nginx module is not a full tunneler. The main difference for writing OpenZiti configurations for the module is that it will honor the upstreams that are set in the Nginx configuration, ignoring the ",(0,i.kt)("inlineCode",{parentName:"p"},"host.v1")," addresses set in the OpenZiti config. For more information, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/securing-apis/aks-api-with-nginx-ziti-module"},"OpenZiti Nginx Proxy Module")," guide."),(0,i.kt)("h4",{id:"reverse-proxy-tunnel-pod"},(0,i.kt)("a",{parentName:"h4",href:"/docs/guides/kubernetes/workload-tunneling/kubernetes-host"},"Reverse Proxy Tunnel Pod")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ziti-host")," Helm chart deploys a headless service and can be used to provide ingress cluster services. The pod runs ",(0,i.kt)("inlineCode",{parentName:"p"},"ziti-edge-tunnel run-host")," to bind OpenZiti Services and forwards requests arriving via OpenZiti to their configured host addresses inside the cluster. For more information, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/kubernetes/workload-tunneling/kubernetes-host"},"ziti-host")," page."))}p.isMDXComponent=!0}}]);