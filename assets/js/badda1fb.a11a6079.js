"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[6344,8306,9369],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||a;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var i=n(67294),r=n(86010);const a={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return i.createElement("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var i=n(87462),r=n(67294),a=n(86010),o=n(12466),l=n(16550),s=n(91980),c=n(67392),d=n(50012);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:i,default:r}}=e;return{value:t,label:n,attributes:i,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const i=(0,l.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(i.location.search);t.set(a,e),i.replace({...i.location,search:t.toString()})}),[a,i])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,a=p(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:a}))),[s,c]=m({queryString:n,groupId:i}),[u,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,a]=(0,d.Nk)(n);return[i,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:i}),y=(()=>{const e=s??u;return h({value:e,tabValues:a})?e:null})();(0,r.useLayoutEffect)((()=>{y&&l(y)}),[y]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),f(e)}),[c,f,a]),tabValues:a}}var y=n(72389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),i=c[n].value;i!==l&&(u(t),s(i))},h=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,i.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>d.push(e),onKeyDown:h,onClick:p},o,{className:(0,a.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":l===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==i}))))}function b(e){const t=f(e);return r.createElement("div",{className:(0,a.Z)("tabs-container",k.tabList)},r.createElement(g,(0,i.Z)({},e,t)),r.createElement(v,(0,i.Z)({},e,t)))}function w(e){const t=(0,y.Z)();return r.createElement(b,(0,i.Z)({key:String(t)},e))}},81070:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>m,default:()=>b,frontMatter:()=>h,metadata:()=>f,toc:()=>k});var i=n(87462),r=(n(67294),n(3905));const a={toc:[]},o="wrapper";function l(e){let{components:t,...n}=e;return(0,r.kt)(o,(0,i.Z)({},a,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'#creates a new user named "NewUser"\nziti edge create identity user "NewUser" -o NewUser.jwt\n')))}l.isMDXComponent=!0;const s={toc:[]},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    Verb: POST\n\n    name:\n      The name of the CA to create\n    isAutoCaEnrollmentEnabled:\n      controls if the CA can be used for automatic enrollment\n    isOttCaEnrollmentEnabled:\n      controls if the CA be used for one time token enrollment\n    isAuthEnabled:\n      controls if the CA is enabled for authentication. Devices can enroll but not connect if set to false\n    certPem:\n      the CA to upload in PEM format\n    body:\n    {\n      "name": "${string}",\n      "isAutoCaEnrollmentEnabled": ${true|false},\n      "isOttCaEnrollmentEnabled": ${true|false},\n      "isAuthEnabled": ${true|false},\n      "certPem": "${string}"\n    }\n')))}d.isMDXComponent=!0;var u=n(74866),p=n(85162);const h={title:"Creating"},m=void 0,f={unversionedId:"learn/core-concepts/identities/creating",id:"learn/core-concepts/identities/creating",title:"Creating",description:"Creating an Identity",source:"@site/docs/learn/core-concepts/identities/10-creating.mdx",sourceDirName:"learn/core-concepts/identities",slug:"/learn/core-concepts/identities/creating",permalink:"/docs/learn/core-concepts/identities/creating",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/learn/core-concepts/identities/10-creating.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Creating"},sidebar:"docsSidebar",previous:{title:"Ziti Identities",permalink:"/docs/learn/core-concepts/identities/overview"},next:{title:"Enrolling",permalink:"/docs/learn/core-concepts/identities/enrolling"}},y={},k=[{value:"Creating an Identity",id:"creating-an-identity",level:2},{value:"Choosing an Enrollment Method",id:"choosing-an-enrollment-method",level:2},{value:"One Time Token (OTT)",id:"one-time-token-ott",level:3},{value:"3rd Party CA - Overview",id:"3rd-party-ca---overview",level:3},{value:"Adding a 3rd Party CA to the Ziti Controller",id:"adding-a-3rd-party-ca-to-the-ziti-controller",level:4},{value:"3rd Party CA - One Time Token",id:"3rd-party-ca---one-time-token",level:4},{value:"3rd Party CA - Auto Enrolled",id:"3rd-party-ca---auto-enrolled",level:4},{value:"Choosing an Identity Type",id:"choosing-an-identity-type",level:2}],g={toc:k},v="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(v,(0,i.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"creating-an-identity"},"Creating an Identity"),(0,r.kt)("p",null,"The mechanism for creating identities is influenced by how your Ziti network is setup, specifically how the PKI is\nestablished. Identities are integrally linked to the PKI configured in a given Ziti network and directly affects how\nidentities are created and enrolled. There are generally three enrollment methods for identities:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"One Time Token (ott) identities using the configured PKI"),(0,r.kt)("li",{parentName:"ul"},"One Time Token (ott) identities using a 3rd Party CA"),(0,r.kt)("li",{parentName:"ul"},"3rd Party auto-enrolled identities")),(0,r.kt)("h2",{id:"choosing-an-enrollment-method"},"Choosing an Enrollment Method"),(0,r.kt)("p",null,"Choosing which type of enrollment your identity will use comes down to whether you are using a 3rd Party CA or not. If the\nnetwork does not have a 3rd Party Certificate configured the only option is to use the One Time Token (OTT) enrollment method."),(0,r.kt)("p",null,"If one or more 3rd Party CA is installed you will need to understand the intention of each 3rd Party certificate."),(0,r.kt)("p",null,"Each of the types of enrollments are secure it just depends on your actual network setup as to which type to choose. If\nyou don't know - just use the One Time Token (OTT) method. The identity can always be recreated at a later date if necessary."),(0,r.kt)("h3",{id:"one-time-token-ott"},"One Time Token (OTT)"),(0,r.kt)("p",null,"The One Time Token method is available to all Ziti networks.  A one time token enrolled identity will\nhave a token generated at the time of the identity's creation.  This token is then submitted at some point in the future\nas part of the ",(0,r.kt)("a",{parentName:"p",href:"./enrolling"},"enrollment")," process.  Once an identity is successfully enrolled - the one time token is\nno longer valid and cannot be used to enroll the same identity again."),(0,r.kt)("p",null,"One time tokens are delivered from the controller as a ",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7519"},"jwt")," and the token\nexpires 24 hours after the identity is created.  The token is downloadable via the Ziti Admin Console. After you create\na user you can go to the Identities page and click the icon that looks like a certificate to download the .jwt file."),(0,r.kt)("p",null,"You can also create an identity for one time token enrollment using the ",(0,r.kt)("inlineCode",{parentName:"p"},"ziti")," cli tool.  This command will\ncreate a new identity and output the jwt to the selected path. You can then transfer the .jwt file to the device where\nthe permanent identity JSON file will be installed by running the ",(0,r.kt)("inlineCode",{parentName:"p"},"enroll")," command."),(0,r.kt)(l,{mdxType:"CreateCliExampleMd"}),(0,r.kt)("h3",{id:"3rd-party-ca---overview"},"3rd Party CA - Overview"),(0,r.kt)("p",null,'The controller is capable of using an existing PKI for authentication and authorization rather than to PKI\nconfigured in the controller.  Certificates that are not controlled by the controller are referred to as "3rd\nparty". If you have an existing PKI setup you wish to reuse or if you are just interested in learning how\nto use a 3rd Party CA this section is for you.'),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Reusing a PKI is not a simple topic and managing and maintaining a PKI is out of the scope of this guide.")),(0,r.kt)("p",null,"A 3rd Party CA will need to be created and the public certificate uploaded into the controller. After using an\nexisting PKI to reuse/generate a certificate, the controller will be to create identities which will be expected to\npresent a certificate during the connection process that is valid per the provided certificate."),(0,r.kt)("h4",{id:"adding-a-3rd-party-ca-to-the-ziti-controller"},"Adding a 3rd Party CA to the Ziti Controller"),(0,r.kt)("p",null,"Adding a certificate to the controller is easy using the console."),(0,r.kt)(u.Z,{mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"tabid-new-ca-ui",label:"New CA via UI",mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'On the left side click "Certificate Authorities"'),(0,r.kt)("li",{parentName:"ol"},'In the top right corner of the screen click the "plus" image to add a new Certificate Authority'),(0,r.kt)("li",{parentName:"ol"},"Enter the name of the Certificate Authority you would like to create"),(0,r.kt)("li",{parentName:"ol"},"Choose if the CA should be used for Enrollment (yes) and Auth (yes)"),(0,r.kt)("li",{parentName:"ol"},"Click save"))),(0,r.kt)(p.Z,{value:"tabid-new-ca-cli",label:"New CA via REST",mdxType:"TabItem"},(0,r.kt)(d,{mdxType:"CreateCaJsonMd"}))),(0,r.kt)("h4",{id:"3rd-party-ca---one-time-token"},"3rd Party CA - One Time Token"),(0,r.kt)("p",null,"3rd Party CA OTT enrollment is closely related to ",(0,r.kt)("a",{parentName:"p",href:"#one-time-token-ott"},"OTT Enrollment"),". The main difference is the\nutilization of a 3rd party CA certificate rather than the configured edge CA and PKI. In this method, the system\ndoes not have access to the 3rd party CA private key and thus cannot provide CSR fulfillment capabilities. Instead it is\nassumed that the enrolling device has a separate process to acquire signed certificates. Rather than submitting a CSR\nthe client uses an already acquired signed certificate as its client certificate for the enrollment request. The client\ncertificate is validated against the CA certificate tied to the one time token."),(0,r.kt)("p",null,"Similar to the ",(0,r.kt)("a",{parentName:"p",href:"#one-time-token-ott"},"OTT Enrollment")," process, identities must be provisioned ahead of enrollment in\norder to generate one time token required and to creat the jwt that can be delivered to enrolling devices. This means\nthat the provisioning of the identities and client certificates must be coordinated. Identities can be enrolled with a one time token flow similar to the ",(0,r.kt)("a",{parentName:"p",href:"#one-time-token-ott"},"one time token flow"),"."),(0,r.kt)("h4",{id:"3rd-party-ca---auto-enrolled"},"3rd Party CA - Auto Enrolled"),(0,r.kt)("p",null,"CA Auto Enrollment is useful in situations where devices are provisioned with certificates en-mass that need to be able\nto register as identities within the edge. This enrollment method allows for device provisioning processes to skip the\nmanual configuration of the edge and instead allow clients to present a signed client certificate to generate an\nidentity during the enrollment process. The identity will grant the client access to authenticate only - any\nauthorization will need to be done after the device identities have been created."),(0,r.kt)("p",null,"A certificate can only be used for one identity. The edge does not allow the same certificate to be used for\nmultiple identities. An enrollment request is comprised of a special enrollment URL used to perform an HTTP POST request\nusing the signed client certificate as the TLS client certificate and an optional JSON payload that allows the client to\nspecify the devices display name and internal username. See ",(0,r.kt)("a",{parentName:"p",href:"./enrolling"},"enrollment")," for more details on enrolling."),(0,r.kt)(u.Z,{mdxType:"Tabs"},(0,r.kt)(p.Z,{label:"New 3rd Party CA Identity via UI",value:"tabid-new-identity-ui",mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'On the left side click "Certificate Authorities"'),(0,r.kt)("li",{parentName:"ol"},'In the top right corner of the screen click the "plus" image to add a new Certificate Authority'),(0,r.kt)("li",{parentName:"ol"},"Enter the name of the Certificate Authority you would like to create"),(0,r.kt)("li",{parentName:"ol"},"Choose if the CA should be used for Enrollment (yes) and Auth (yes)"),(0,r.kt)("li",{parentName:"ol"},"Click save"))),(0,r.kt)(p.Z,{label:"New 3rd Party Identity via CLI",value:"tabid-new-identity-cli",mdxType:"TabItem"},(0,r.kt)(l,{mdxType:"CreateIdCliMd"}))),(0,r.kt)("h2",{id:"choosing-an-identity-type"},"Choosing an Identity Type"),(0,r.kt)("p",null,"The three types of identities are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"User"),(0,r.kt)("li",{parentName:"ul"},"Device"),(0,r.kt)("li",{parentName:"ul"},"Service")),(0,r.kt)("p",null,"These are functionally equivalent and have identical properties. You may wish to express the intended purpose of an\nidentity by choosing one or another type when the identity is created. The type can not be changed."))}b.isMDXComponent=!0},77174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(87462),r=(n(67294),n(3905));const a={title:"Enrolling"},o=void 0,l={unversionedId:"learn/core-concepts/identities/enrolling",id:"learn/core-concepts/identities/enrolling",title:"Enrolling",description:"Enrolling an Identity",source:"@site/docs/learn/core-concepts/identities/20-enrolling.md",sourceDirName:"learn/core-concepts/identities",slug:"/learn/core-concepts/identities/enrolling",permalink:"/docs/learn/core-concepts/identities/enrolling",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/learn/core-concepts/identities/20-enrolling.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Enrolling"},sidebar:"docsSidebar",previous:{title:"Creating",permalink:"/docs/learn/core-concepts/identities/creating"},next:{title:"Ziti Services",permalink:"/docs/learn/core-concepts/services/overview"}},s={},c=[{value:"Enrolling an Identity",id:"enrolling-an-identity",level:2},{value:"Overview",id:"overview",level:3},{value:"One Time Token Enrollment - Internal PKI",id:"one-time-token-enrollment---internal-pki",level:3},{value:"3rd Party CA - One Time Token",id:"3rd-party-ca---one-time-token",level:3},{value:"3rd Party CA - Auto",id:"3rd-party-ca---auto",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"enrolling-an-identity"},"Enrolling an Identity"),(0,r.kt)("p",null,"All connections made to the Ziti network leverage ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Mutual_authentication"},"mutual TLS"),'\nwhich means every client needs a valid X509 certificate which it will present to the Ziti network during the connection\nprocess. The process of obtaining a key/certificate pair and presenting it securely to the controller is called\n"Enrollment".'),(0,r.kt)("h3",{id:"overview"},"Overview"),(0,r.kt)("p",null,"All identities need to be enrolled with the controller so the controller can authenticate the incoming connection.\nThis process is slightly different for each type of identity and is complex. The easiest way to enroll an identity is to\nuse either the Ziti Desktop Edge/Ziti Mobile Edge for your operating system. Alternatively, you may perform the enrollment separate\nwith the ",(0,r.kt)("inlineCode",{parentName:"p"},"ziti")," CLI which can be downloaded from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/openziti/ziti/releases/latest"},"GitHub releases page")," "),(0,r.kt)("h3",{id:"one-time-token-enrollment---internal-pki"},"One Time Token Enrollment - Internal PKI"),(0,r.kt)("p",null,"Perhaps the easiest path to an enrolled identity is by using the one-time token enrollment flow. This flow leverages the\nPKI configured in the controller.  Using the one-time token flow - the ",(0,r.kt)("inlineCode",{parentName:"p"},"ziti")," CLI will generate a private key\nand a certificate signing request for the controller's built-in certificate authority to fulfill."),(0,r.kt)("p",null,"Follow these steps to enroll an identity with a one-time token:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./creating"},"create the Identity")),(0,r.kt)("li",{parentName:"ul"},"download or copy the JWT - this file contains the single use token"),(0,r.kt)("li",{parentName:"ul"},"run the ",(0,r.kt)("inlineCode",{parentName:"li"},"ziti")," CLI:")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"ziti edge enroll \\\n    --jwt ${jwt_file} \\\n    --out ${identity_config_file}\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The output from the ",(0,r.kt)("inlineCode",{parentName:"p"},"ziti")," CLI is a permanent identity configuration file which\nmust be stored securely. This file contains within it the private key that backs\nthe certificate issued by the controller.  This file should not be\ntransferred or shared and should not be moved from the machine unless you are\nconfident you understand the risks involved in doing so.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage for ",(0,r.kt)("inlineCode",{parentName:"strong"},"ziti-edge-tunnel")," CLI")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"# enroll from a token file\n./ziti-edge-tunnel enroll --jwt ./myTunneler.jwt --identity ./myTunneler.json\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"# enroll from stdin\n./ziti-edge-tunnel enroll --jwt - --identity ./myTunneler.json < ./myTunneler.jwt\n")),(0,r.kt)("h3",{id:"3rd-party-ca---one-time-token"},"3rd Party CA - One Time Token"),(0,r.kt)("p",null,"This flow allows you to pre-create identities for a 3rd party CA with distinct role attributes. This flow is similar to the One Time Token flow from above except that it expects that a private key and certificate have\nalready been created on or distributed to the machine that is about to enroll and that the certificate presented is\nissued by a validated, ",(0,r.kt)("a",{parentName:"p",href:"/docs/learn/core-concepts/pki#third-party-ca-optional"},"third party CA"),"."),(0,r.kt)("p",null,"Follow these steps to enroll a 3rd Party CA - one-time token identity:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./creating"},"create the Identity")),(0,r.kt)("li",{parentName:"ul"},"download or copy the JWT - this file contains the one-time token"),(0,r.kt)("li",{parentName:"ul"},"run the ",(0,r.kt)("inlineCode",{parentName:"li"},"ziti")," CLI. Notice you can provide the filename of the identity config JSON file to output:")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"ziti edge enroll \\\n    --cert ${user_certificate} \\\n    --key ${user_private_key} \\\n    --jwt ${one_time_jwt_file} \\\n    --out ${identity_config_file}\n")),(0,r.kt)("h3",{id:"3rd-party-ca---auto"},"3rd Party CA - Auto"),(0,r.kt)("p",null,"When using a third party CA identity creation process in the controller is\nautomatic. Enrolling the identity will create it with the default role attributes that were specified when the 3rd party CA was created."),(0,r.kt)("p",null,'Like "3rd Party CA - One Time Token" - this flow expects that a private key and certificate have\nalready been created on or distributed to the machine that is about to enroll.\nThe certificate presented to the controller must be issued by a ',(0,r.kt)("a",{parentName:"p",href:"/docs/learn/core-concepts/pki#third-party-ca-optional"},"third\nparty CA")," that was already\nimported and verified in the controller with the\n",(0,r.kt)("inlineCode",{parentName:"p"},"isAutoCaEnrollmentEnabled")," property set to true."),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"ziti")," CLI will also require the re-use of a permanent JWT that is unique to the external CA. The JWT\ncan be downloaded from the controller from:  ",(0,r.kt)("inlineCode",{parentName:"p"},"${controller_uri}/cas/${id}/jwt")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"${controller_uri}")," represents\nthe fully qualified address of the controller api and ",(0,r.kt)("inlineCode",{parentName:"p"},"${id}")," represents the identifier for the given third party CA."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"ziti edge enroll \\\n    --cert ${user_certificate} \\\n    --key ${user_private_key} \\\n    --jwt ${reusable_ca_jwt_file} \\\n    --out ${identity_config_file}\n")),(0,r.kt)("p",null,"If supplied, the argument to option ",(0,r.kt)("inlineCode",{parentName:"p"},"--idname")," will be used as the name for the identity created. The default name of auto-created identities is generated from a template that uses values from the user certificate i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"[caName]-[commonName]"),"."))}p.isMDXComponent=!0},41478:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var i=n(87462),r=(n(67294),n(3905)),a=n(81070),o=n(77174);const l={},s="Ziti Identities",c={unversionedId:"learn/core-concepts/identities/overview",id:"learn/core-concepts/identities/overview",title:"Ziti Identities",description:"Ziti is built on the foundation of zero trust. A solid pillar of that foundation requires that all connections in a",source:"@site/docs/learn/core-concepts/identities/overview.mdx",sourceDirName:"learn/core-concepts/identities",slug:"/learn/core-concepts/identities/overview",permalink:"/docs/learn/core-concepts/identities/overview",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/learn/core-concepts/identities/overview.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Service Dial",permalink:"/docs/learn/core-concepts/clients/process-sequences/ServiceDial"},next:{title:"Creating",permalink:"/docs/learn/core-concepts/identities/creating"}},d={},u=[{value:"3rd Party Certificates",id:"3rd-party-certificates",level:2}],p={toc:u},h="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ziti-identities"},"Ziti Identities"),(0,r.kt)("p",null,"Ziti is built on the foundation of zero trust. A solid pillar of that foundation requires that all connections in a\nZiti-enabled network are authenticated.  Identities are the basis for Ziti authentication.  All devices connecting to a\nZiti network will have an Identity which is presented at the time of a connection being established by both the device\ninitiating the connection and the device receiving the incoming connection. Ziti implements ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Mutual_authentication"},"mutual\nTLS")," in order to authenticate both sides of a connection."),(0,r.kt)("p",null,"Conceptually an identity can be thought of as congruent to a user account.  Identities are logical entities stored\ninside the controller which map an X509 certificate to a particular named identity.  Identities exist not only to\nauthenticate connections but are also used to authorize identities within Ziti. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/learn/core-concepts/security/authorization/policies/overview"},"Policies"),"\nfor more information on authorization of identities."),(0,r.kt)("h2",{id:"3rd-party-certificates"},"3rd Party Certificates"),(0,r.kt)("p",null,'The certificate a Ziti Edge client presents can be generated by the controller using the configured PKI or this\ncertificate can come from an existing PKI not controlled by the controller. Certificates which are not created by\nthe controller are referred to as "3rd Party" because from the perspective of the controller the certificates\nare not from the configured PKI.'),(0,r.kt)(a.default,{mdxType:"CreateIdentityCliMd"}),(0,r.kt)(o.default,{mdxType:"EnrollingMd"}))}m.isMDXComponent=!0}}]);