"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[1301],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=p(t),d=o,h=f["".concat(c,".").concat(d)]||f[d]||u[d]||i;return t?r.createElement(h,a(a({ref:n},l),{},{components:t})):r.createElement(h,a({ref:n},l))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[f]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},71814:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const i={sidebar_label:"host.v2",sidebar_position:20},a="The host.v2 Config Type",s={unversionedId:"reference/config-types/host.v2",id:"reference/config-types/host.v2",title:"The host.v2 Config Type",description:"The host.v2 configuration type defines how edge routers or tunnelers can make outgoing connections",source:"@site/docs/reference/config-types/host.v2.md",sourceDirName:"reference/config-types",slug:"/reference/config-types/host.v2",permalink:"/docs/reference/config-types/host.v2",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/reference/config-types/host.v2.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_label:"host.v2",sidebar_position:20},sidebar:"docsSidebar",previous:{title:"host.v1",permalink:"/docs/reference/config-types/host.v1"},next:{title:"Overview",permalink:"/docs/reference/"}},c={},p=[{value:"Endpoint Configuration",id:"endpoint-configuration",level:2}],l={toc:p},f="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(f,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"the-hostv2-config-type"},"The ",(0,o.kt)("inlineCode",{parentName:"h1"},"host.v2")," Config Type"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"host.v2")," configuration type defines how edge routers or tunnelers can make outgoing connections\nfor associated services. The config type also allows specifying health checks for the service. An\nendpoint in a ",(0,o.kt)("inlineCode",{parentName:"p"},"host.v2")," config can be specified explicitly or can be configured to use information\npassed through from a tunneler intercepting traffic, allowing it to forward traffic."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"host.v2")," type allows defining multiple host endpoints. If only a single endpoint is required,\nconsider using the simpler ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/config-types/host.v1"},(0,o.kt)("inlineCode",{parentName:"a"},"host.v1"))," config type instead."),(0,o.kt)("h2",{id:"endpoint-configuration"},"Endpoint Configuration"),(0,o.kt)("p",null,"Each config can define one or more endpoints. If a service is hosted by multiple servers, the\nconfiguration can have an endpoint defined for each hosting server."),(0,o.kt)("p",null,"Each endpoint defined will result in a terminator for each router or tunneler hosting the\napplication."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"host.v2")," configuration only has one field."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"terminators")," - an array of ",(0,o.kt)("a",{parentName:"li",href:"/docs/reference/config-types/host.v1"},(0,o.kt)("inlineCode",{parentName:"a"},"host.v1"))," entries, one per endpoint")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("p",null,"This service is hosted by two application servers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "terminators": [\n    {\n      "address": "192.168.100.1",\n      "port": 80,\n      "protocol": "tcp"\n    },\n    {\n      "address": "192.168.100.2",\n      "port": 80,\n      "protocol": "tcp"\n    }\n  ]\n}\n')),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/config-types/host.v1"},(0,o.kt)("inlineCode",{parentName:"a"},"host.v1"))," specification for what can be done with each entry."))}u.isMDXComponent=!0}}]);